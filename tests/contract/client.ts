/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  hints: {
    'call_abi(string)string': {
      read_only: true,
      call_config: {
        no_op: 'CALL',
      },
    },
    'call_abi_foreign_refs()string': {
      read_only: true,
      call_config: {
        no_op: 'CALL',
      },
    },
    'set_global(uint64,uint64,string,byte[4])void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'set_local(uint64,uint64,string,byte[4])void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'issue_transfer_to_sender(uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'set_box(byte[4],string)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'error()void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'opt_in()void': {
      call_config: {
        opt_in: 'CALL',
      },
    },
    'emitSwapped(uint64,uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'emitSwappedTwice(uint64,uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'emitComplex(uint64,uint64,uint32[])void': {
      call_config: {
        no_op: 'CALL',
      },
    },
  },
  source: {
    approval:
      '',
    clear: 'I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu',
  },
  state: {
    global: {
      num_byte_slices: 2,
      num_uints: 3,
    },
    local: {
      num_byte_slices: 2,
      num_uints: 2,
    },
  },
  schema: {
    global: {
      declared: {
        bytes1: {
          type: 'bytes',
          key: 'bytes1',
          descr: '',
        },
        bytes2: {
          type: 'bytes',
          key: 'bytes2',
          descr: '',
        },
        int1: {
          type: 'uint64',
          key: 'int1',
          descr: '',
        },
        int2: {
          type: 'uint64',
          key: 'int2',
          descr: '',
        },
        value: {
          type: 'uint64',
          key: 'value',
          descr: '',
        },
      },
      reserved: {},
    },
    local: {
      declared: {
        local_bytes1: {
          type: 'bytes',
          key: 'local_bytes1',
          descr: '',
        },
        local_bytes2: {
          type: 'bytes',
          key: 'local_bytes2',
          descr: '',
        },
        local_int1: {
          type: 'uint64',
          key: 'local_int1',
          descr: '',
        },
        local_int2: {
          type: 'uint64',
          key: 'local_int2',
          descr: '',
        },
      },
      reserved: {},
    },
  },
  contract: {
    name: 'TestingApp',
    methods: [
      {
        name: 'call_abi',
        args: [
          {
            type: 'string',
            name: 'value',
          },
        ],
        returns: {
          type: 'string',
        },
      },
      {
        name: 'call_abi_foreign_refs',
        args: [],
        returns: {
          type: 'string',
        },
      },
      {
        name: 'set_global',
        args: [
          {
            type: 'uint64',
            name: 'int1',
          },
          {
            type: 'uint64',
            name: 'int2',
          },
          {
            type: 'string',
            name: 'bytes1',
          },
          {
            type: 'byte[4]',
            name: 'bytes2',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'set_local',
        args: [
          {
            type: 'uint64',
            name: 'int1',
          },
          {
            type: 'uint64',
            name: 'int2',
          },
          {
            type: 'string',
            name: 'bytes1',
          },
          {
            type: 'byte[4]',
            name: 'bytes2',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'issue_transfer_to_sender',
        args: [
          {
            type: 'uint64',
            name: 'amount',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'set_box',
        args: [
          {
            type: 'byte[4]',
            name: 'name',
          },
          {
            type: 'string',
            name: 'value',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'error',
        args: [],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'opt_in',
        args: [],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'emitSwapped',
        args: [
          {
            type: 'uint64',
            name: 'a',
          },
          {
            type: 'uint64',
            name: 'b',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'emitSwappedTwice',
        args: [
          {
            type: 'uint64',
            name: 'a',
          },
          {
            type: 'uint64',
            name: 'b',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'emitComplex',
        args: [
          {
            type: 'uint64',
            name: 'a',
          },
          {
            type: 'uint64',
            name: 'b',
          },
          {
            type: 'uint32[]',
            name: 'array',
          },
        ],
        returns: {
          type: 'void',
        },
      },
    ],
    networks: {},
  },
  bare_call_config: {
    delete_application: 'CALL',
    no_op: 'CREATE',
    opt_in: 'CREATE',
    update_application: 'CALL',
  },
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

/**
 * Defines the types of available calls and state of the TestingApp smart contract.
 */
export type TestingApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    'call_abi(string)string' | 'call_abi',
    {
      argsObj: {
        value: string
      }
      argsTuple: [value: string]
      returns: string
    }
  > &
    Record<
      'call_abi_foreign_refs()string' | 'call_abi_foreign_refs',
      {
        argsObj: {}
        argsTuple: []
        returns: string
      }
    > &
    Record<
      'set_global(uint64,uint64,string,byte[4])void' | 'set_global',
      {
        argsObj: {
          int1: bigint | number
          int2: bigint | number
          bytes1: string
          bytes2: Uint8Array
        }
        argsTuple: [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
        returns: void
      }
    > &
    Record<
      'set_local(uint64,uint64,string,byte[4])void' | 'set_local',
      {
        argsObj: {
          int1: bigint | number
          int2: bigint | number
          bytes1: string
          bytes2: Uint8Array
        }
        argsTuple: [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
        returns: void
      }
    > &
    Record<
      'issue_transfer_to_sender(uint64)void' | 'issue_transfer_to_sender',
      {
        argsObj: {
          amount: bigint | number
        }
        argsTuple: [amount: bigint | number]
        returns: void
      }
    > &
    Record<
      'set_box(byte[4],string)void' | 'set_box',
      {
        argsObj: {
          name: Uint8Array
          value: string
        }
        argsTuple: [name: Uint8Array, value: string]
        returns: void
      }
    > &
    Record<
      'error()void' | 'error',
      {
        argsObj: {}
        argsTuple: []
        returns: void
      }
    > &
    Record<
      'opt_in()void' | 'opt_in',
      {
        argsObj: {}
        argsTuple: []
        returns: void
      }
    > &
    Record<
      'emitSwapped(uint64,uint64)void' | 'emitSwapped',
      {
        argsObj: {
          a: bigint | number
          b: bigint | number
        }
        argsTuple: [a: bigint | number, b: bigint | number]
        returns: void
      }
    > &
    Record<
      'emitSwappedTwice(uint64,uint64)void' | 'emitSwappedTwice',
      {
        argsObj: {
          a: bigint | number
          b: bigint | number
        }
        argsTuple: [a: bigint | number, b: bigint | number]
        returns: void
      }
    > &
    Record<
      'emitComplex(uint64,uint64,uint32[])void' | 'emitComplex',
      {
        argsObj: {
          a: bigint | number
          b: bigint | number
          array: number[]
        }
        argsTuple: [a: bigint | number, b: bigint | number, array: number[]]
        returns: void
      }
    >
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      bytes1?: BinaryState
      bytes2?: BinaryState
      int1?: IntegerState
      int2?: IntegerState
      value?: IntegerState
    }
    local: {
      local_bytes1?: BinaryState
      local_bytes2?: BinaryState
      local_int1?: IntegerState
      local_int2?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type TestingAppSig = keyof TestingApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends TestingAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams &
  CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the TestingApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends TestingAppSig> = TestingApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TestingApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TestingAppSig> = TestingApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type TestingAppCreateCalls = (typeof TestingAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type TestingAppCreateCallParams = TypedCallParams<undefined> & (OnCompleteNoOp | OnCompleteOptIn)
/**
 * A factory for available 'update' calls
 */
export type TestingAppUpdateCalls = (typeof TestingAppCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type TestingAppUpdateCallParams = TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type TestingAppDeleteCalls = (typeof TestingAppCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type TestingAppDeleteCallParams = TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type TestingAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: TestingAppCreateCalls) => TestingAppCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: TestingAppUpdateCalls) => TestingAppUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: TestingAppDeleteCalls) => TestingAppDeleteCallParams
}

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class TestingAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the TestingApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(
        params: BareCallArgs &
          AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          (OnCompleteNoOp | OnCompleteOptIn) = {},
      ) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the TestingApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the TestingApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the TestingApp smart contract using the opt_in()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optIn(args: MethodArgs<'opt_in()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'opt_in()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the call_abi(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static callAbi(args: MethodArgs<'call_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'call_abi(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the call_abi_foreign_refs()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static callAbiForeignRefs(args: MethodArgs<'call_abi_foreign_refs()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'call_abi_foreign_refs()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_global(uint64,uint64,string,byte[4])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setGlobal(args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_global(uint64,uint64,string,byte[4])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.int1, args.int2, args.bytes1, args.bytes2],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_local(uint64,uint64,string,byte[4])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setLocal(args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_local(uint64,uint64,string,byte[4])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.int1, args.int2, args.bytes1, args.bytes2],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the issue_transfer_to_sender(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static issueTransferToSender(
    args: MethodArgs<'issue_transfer_to_sender(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'issue_transfer_to_sender(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_box(byte[4],string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setBox(args: MethodArgs<'set_box(byte[4],string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_box(byte[4],string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the error()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static error(args: MethodArgs<'error()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'error()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the emitSwapped(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static emitSwapped(args: MethodArgs<'emitSwapped(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'emitSwapped(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a, args.b],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the emitSwappedTwice(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static emitSwappedTwice(args: MethodArgs<'emitSwappedTwice(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'emitSwappedTwice(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a, args.b],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the emitComplex(uint64,uint64,uint32[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static emitComplex(args: MethodArgs<'emitComplex(uint64,uint64,uint32[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'emitComplex(uint64,uint64,uint32[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a, args.b, args.array],
      ...params,
    }
  }
}

/**
 * A client to make calls to the TestingApp smart contract
 */
export class TestingAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `TestingAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(
    appDetails: AppDetails,
    private algod: Algodv2,
  ) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod,
    )
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue =
      result.return?.returnValue !== undefined && returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined)
    return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof TestingApp['methods']>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>,
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the TestingApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: TestingAppDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(TestingAppCallFactory.create)
    const updateArgs = params.updateCall?.(TestingAppCallFactory.update)
    const deleteArgs = params.deleteCall?.(TestingAppCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the TestingApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(
        args: BareCallArgs &
          AppClientCallCoreParams &
          AppClientCompilationParams &
          CoreAppCallArgs &
          (OnCompleteNoOp | OnCompleteOptIn) = {},
      ) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.delete(args))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the TestingApp smart contract using the opt_in()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optIn(args: MethodArgs<'opt_in()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'opt_in()void'>>(
          await $this.appClient.optIn(TestingAppCallFactory.optIn.optIn(args, params)),
        )
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the TestingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the call_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public callAbi(args: MethodArgs<'call_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TestingAppCallFactory.callAbi(args, params))
  }

  /**
   * Calls the call_abi_foreign_refs()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public callAbiForeignRefs(args: MethodArgs<'call_abi_foreign_refs()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TestingAppCallFactory.callAbiForeignRefs(args, params))
  }

  /**
   * Calls the set_global(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setGlobal(
    args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(TestingAppCallFactory.setGlobal(args, params))
  }

  /**
   * Calls the set_local(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setLocal(args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TestingAppCallFactory.setLocal(args, params))
  }

  /**
   * Calls the issue_transfer_to_sender(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public issueTransferToSender(
    args: MethodArgs<'issue_transfer_to_sender(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(TestingAppCallFactory.issueTransferToSender(args, params))
  }

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBox(args: MethodArgs<'set_box(byte[4],string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TestingAppCallFactory.setBox(args, params))
  }

  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public error(args: MethodArgs<'error()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TestingAppCallFactory.error(args, params))
  }

  /**
   * Calls the emitSwapped(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public emitSwapped(args: MethodArgs<'emitSwapped(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TestingAppCallFactory.emitSwapped(args, params))
  }

  /**
   * Calls the emitSwappedTwice(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public emitSwappedTwice(args: MethodArgs<'emitSwappedTwice(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TestingAppCallFactory.emitSwappedTwice(args, params))
  }

  /**
   * Calls the emitComplex(uint64,uint64,uint32[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public emitComplex(args: MethodArgs<'emitComplex(uint64,uint64,uint32[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TestingAppCallFactory.emitComplex(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value)) throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      },
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value) throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<TestingApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get bytes1() {
        return TestingAppClient.getBinaryState(state, 'bytes1')
      },
      get bytes2() {
        return TestingAppClient.getBinaryState(state, 'bytes2')
      },
      get int1() {
        return TestingAppClient.getIntegerState(state, 'int1')
      },
      get int2() {
        return TestingAppClient.getIntegerState(state, 'int2')
      },
      get value() {
        return TestingAppClient.getIntegerState(state, 'value')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<TestingApp['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get local_bytes1() {
        return TestingAppClient.getBinaryState(state, 'local_bytes1')
      },
      get local_bytes2() {
        return TestingAppClient.getBinaryState(state, 'local_bytes2')
      },
      get local_int1() {
        return TestingAppClient.getIntegerState(state, 'local_int1')
      },
      get local_int2() {
        return TestingAppClient.getIntegerState(state, 'local_int2')
      },
    }
  }

  public compose(): TestingAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain: Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      callAbi(args: MethodArgs<'call_abi(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.callAbi(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      callAbiForeignRefs(args: MethodArgs<'call_abi_foreign_refs()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.callAbiForeignRefs(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      setGlobal(args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.setGlobal(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      setLocal(args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.setLocal(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      issueTransferToSender(args: MethodArgs<'issue_transfer_to_sender(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.issueTransferToSender(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      setBox(args: MethodArgs<'set_box(byte[4],string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.setBox(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      error(args: MethodArgs<'error()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.error(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      emitSwapped(args: MethodArgs<'emitSwapped(uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.emitSwapped(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      emitSwappedTwice(args: MethodArgs<'emitSwappedTwice(uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.emitSwappedTwice(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      emitComplex(args: MethodArgs<'emitComplex(uint64,uint64,uint32[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.emitComplex(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() =>
              client.update.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }),
            )
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() =>
              client.delete.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }),
            )
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          optIn(args: MethodArgs<'opt_in()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() =>
              client.optIn.optIn(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
            )
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(
        txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom,
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)),
        )
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue,
          ),
        }
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => (resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)),
        }
      },
    } as unknown as TestingAppComposer
  }
}
export type TestingAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the call_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbi(
    args: MethodArgs<'call_abi(string)string'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'call_abi(string)string'>]>

  /**
   * Calls the call_abi_foreign_refs()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiForeignRefs(
    args: MethodArgs<'call_abi_foreign_refs()string'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'call_abi_foreign_refs()string'>]>

  /**
   * Calls the set_global(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGlobal(
    args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'set_global(uint64,uint64,string,byte[4])void'>]>

  /**
   * Calls the set_local(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setLocal(
    args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'set_local(uint64,uint64,string,byte[4])void'>]>

  /**
   * Calls the issue_transfer_to_sender(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  issueTransferToSender(
    args: MethodArgs<'issue_transfer_to_sender(uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'issue_transfer_to_sender(uint64)void'>]>

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBox(
    args: MethodArgs<'set_box(byte[4],string)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'set_box(byte[4],string)void'>]>

  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  error(
    args: MethodArgs<'error()void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'error()void'>]>

  /**
   * Calls the emitSwapped(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emitSwapped(
    args: MethodArgs<'emitSwapped(uint64,uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'emitSwapped(uint64,uint64)void'>]>

  /**
   * Calls the emitSwappedTwice(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emitSwappedTwice(
    args: MethodArgs<'emitSwappedTwice(uint64,uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'emitSwappedTwice(uint64,uint64)void'>]>

  /**
   * Calls the emitComplex(uint64,uint64,uint32[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emitComplex(
    args: MethodArgs<'emitComplex(uint64,uint64,uint32[])void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): TestingAppComposer<[...TReturns, MethodReturn<'emitComplex(uint64,uint64,uint32[])void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the TestingApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(
      args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs,
    ): TestingAppComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the TestingApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): TestingAppComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the TestingApp smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(
      args: MethodArgs<'opt_in()void'>,
      params?: AppClientCallCoreParams,
    ): TestingAppComposer<[...TReturns, MethodReturn<'opt_in()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the TestingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): TestingAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom,
  ): TestingAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<TestingAppComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<TestingAppComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type TestingAppComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type TestingAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
