/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientBareCallParams,
  AppClientCompilationParams,
  AppClientMethodCallParams,
  AppClientParams,
  CallOnComplete,
  CloneAppClientParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
} from '@algorandfoundation/algokit-utils/types/app-client'
import {
  AppFactory as _AppFactory,
  AppFactoryAppClientParams,
  AppFactoryDeployParams,
  AppFactoryParams,
  AppFactoryResolveAppClientByCreatorAndNameParams,
  CreateSchema,
} from '@algorandfoundation/algokit-utils/types/app-factory'
import { SimulateOptions, TransactionComposer } from '@algorandfoundation/algokit-utils/types/composer'
import { SendAtomicTransactionComposerResults, SendParams } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {
  arcs: [],
  name: 'TestingApp',
  structs: {},
  methods: [
    {
      name: 'call_abi',
      args: [{ name: 'value', type: 'string' }],
      returns: { type: 'string' },
      events: [],
      readonly: true,
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'call_abi_foreign_refs',
      args: [],
      returns: { type: 'string' },
      events: [],
      readonly: true,
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'set_global',
      args: [
        { name: 'int1', type: 'uint64' },
        { name: 'int2', type: 'uint64' },
        { name: 'bytes1', type: 'string' },
        { name: 'bytes2', type: 'byte[4]' },
      ],
      returns: { type: 'void' },
      events: [],
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'set_local',
      args: [
        { name: 'int1', type: 'uint64' },
        { name: 'int2', type: 'uint64' },
        { name: 'bytes1', type: 'string' },
        { name: 'bytes2', type: 'byte[4]' },
      ],
      returns: { type: 'void' },
      events: [],
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'issue_transfer_to_sender',
      args: [{ name: 'amount', type: 'uint64' }],
      returns: { type: 'void' },
      events: [],
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'set_box',
      args: [
        { name: 'name', type: 'byte[4]' },
        { name: 'value', type: 'string' },
      ],
      returns: { type: 'void' },
      events: [],
      actions: { create: [], call: ['NoOp'] },
    },
    { name: 'error', args: [], returns: { type: 'void' }, events: [], actions: { create: [], call: ['NoOp'] } },
    { name: 'opt_in', args: [], returns: { type: 'void' }, events: [], actions: { create: [], call: ['OptIn'] } },
    {
      name: 'emitSwapped',
      args: [
        { name: 'a', type: 'uint64' },
        { name: 'b', type: 'uint64' },
      ],
      returns: { type: 'void' },
      events: [],
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'emitSwappedTwice',
      args: [
        { name: 'a', type: 'uint64' },
        { name: 'b', type: 'uint64' },
      ],
      returns: { type: 'void' },
      events: [],
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'emitComplex',
      args: [
        { name: 'a', type: 'uint64' },
        { name: 'b', type: 'uint64' },
        { name: 'array', type: 'uint32[]' },
      ],
      returns: { type: 'void' },
      events: [],
      actions: { create: [], call: ['NoOp'] },
    },
  ],
  state: {
    schema: { global: { ints: 3, bytes: 2 }, local: { ints: 2, bytes: 2 } },
    keys: {
      global: {
        bytes1: { key: 'Ynl0ZXMx', keyType: 'AVMString', valueType: 'AVMBytes', desc: '' },
        bytes2: { key: 'Ynl0ZXMy', keyType: 'AVMString', valueType: 'AVMBytes', desc: '' },
        int1: { key: 'aW50MQ==', keyType: 'AVMString', valueType: 'AVMUint64', desc: '' },
        int2: { key: 'aW50Mg==', keyType: 'AVMString', valueType: 'AVMUint64', desc: '' },
        value: { key: 'dmFsdWU=', keyType: 'AVMString', valueType: 'AVMUint64', desc: '' },
      },
      local: {
        local_bytes1: { key: 'bG9jYWxfYnl0ZXMx', keyType: 'AVMString', valueType: 'AVMBytes', desc: '' },
        local_bytes2: { key: 'bG9jYWxfYnl0ZXMy', keyType: 'AVMString', valueType: 'AVMBytes', desc: '' },
        local_int1: { key: 'bG9jYWxfaW50MQ==', keyType: 'AVMString', valueType: 'AVMUint64', desc: '' },
        local_int2: { key: 'bG9jYWxfaW50Mg==', keyType: 'AVMString', valueType: 'AVMUint64', desc: '' },
      },
      box: {},
    },
    maps: { global: {}, local: {}, box: {} },
  },
  source: {
    approval:
      '',
    clear: 'I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu',
  },
  bareActions: { create: ['NoOp', 'OptIn'], call: ['DeleteApplication', 'UpdateApplication'] },
} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never

/**
 * The argument types for the TestingApp contract
 */
export type TestingAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'call_abi(string)string': {
      value: string
    }
    'call_abi_foreign_refs()string': Record<string, never>
    'set_global(uint64,uint64,string,byte[4])void': {
      int1: bigint | number
      int2: bigint | number
      bytes1: string
      bytes2: Uint8Array
    }
    'set_local(uint64,uint64,string,byte[4])void': {
      int1: bigint | number
      int2: bigint | number
      bytes1: string
      bytes2: Uint8Array
    }
    'issue_transfer_to_sender(uint64)void': {
      amount: bigint | number
    }
    'set_box(byte[4],string)void': {
      name: Uint8Array
      value: string
    }
    'error()void': Record<string, never>
    'opt_in()void': Record<string, never>
    'emitSwapped(uint64,uint64)void': {
      a: bigint | number
      b: bigint | number
    }
    'emitSwappedTwice(uint64,uint64)void': {
      a: bigint | number
      b: bigint | number
    }
    'emitComplex(uint64,uint64,uint32[])void': {
      a: bigint | number
      b: bigint | number
      array: bigint | number[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'call_abi(string)string': [value: string]
    'call_abi_foreign_refs()string': []
    'set_global(uint64,uint64,string,byte[4])void': [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
    'set_local(uint64,uint64,string,byte[4])void': [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
    'issue_transfer_to_sender(uint64)void': [amount: bigint | number]
    'set_box(byte[4],string)void': [name: Uint8Array, value: string]
    'error()void': []
    'opt_in()void': []
    'emitSwapped(uint64,uint64)void': [a: bigint | number, b: bigint | number]
    'emitSwappedTwice(uint64,uint64)void': [a: bigint | number, b: bigint | number]
    'emitComplex(uint64,uint64,uint32[])void': [a: bigint | number, b: bigint | number, array: bigint | number[]]
  }
}

/**
 * The return type for each method
 */
export type TestingAppReturns = {
  'call_abi(string)string': string
  'call_abi_foreign_refs()string': string
  'set_global(uint64,uint64,string,byte[4])void': void
  'set_local(uint64,uint64,string,byte[4])void': void
  'issue_transfer_to_sender(uint64)void': void
  'set_box(byte[4],string)void': void
  'error()void': void
  'opt_in()void': void
  'emitSwapped(uint64,uint64)void': void
  'emitSwappedTwice(uint64,uint64)void': void
  'emitComplex(uint64,uint64,uint32[])void': void
}

/**
 * Defines the types of available calls and state of the TestingApp smart contract.
 */
export type TestingAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    'call_abi(string)string' | 'call_abi',
    {
      argsObj: TestingAppArgs['obj']['call_abi(string)string']
      argsTuple: TestingAppArgs['tuple']['call_abi(string)string']
      returns: TestingAppReturns['call_abi(string)string']
    }
  > &
    Record<
      'call_abi_foreign_refs()string' | 'call_abi_foreign_refs',
      {
        argsObj: TestingAppArgs['obj']['call_abi_foreign_refs()string']
        argsTuple: TestingAppArgs['tuple']['call_abi_foreign_refs()string']
        returns: TestingAppReturns['call_abi_foreign_refs()string']
      }
    > &
    Record<
      'set_global(uint64,uint64,string,byte[4])void' | 'set_global',
      {
        argsObj: TestingAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
        argsTuple: TestingAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
        returns: TestingAppReturns['set_global(uint64,uint64,string,byte[4])void']
      }
    > &
    Record<
      'set_local(uint64,uint64,string,byte[4])void' | 'set_local',
      {
        argsObj: TestingAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
        argsTuple: TestingAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
        returns: TestingAppReturns['set_local(uint64,uint64,string,byte[4])void']
      }
    > &
    Record<
      'issue_transfer_to_sender(uint64)void' | 'issue_transfer_to_sender',
      {
        argsObj: TestingAppArgs['obj']['issue_transfer_to_sender(uint64)void']
        argsTuple: TestingAppArgs['tuple']['issue_transfer_to_sender(uint64)void']
        returns: TestingAppReturns['issue_transfer_to_sender(uint64)void']
      }
    > &
    Record<
      'set_box(byte[4],string)void' | 'set_box',
      {
        argsObj: TestingAppArgs['obj']['set_box(byte[4],string)void']
        argsTuple: TestingAppArgs['tuple']['set_box(byte[4],string)void']
        returns: TestingAppReturns['set_box(byte[4],string)void']
      }
    > &
    Record<
      'error()void' | 'error',
      {
        argsObj: TestingAppArgs['obj']['error()void']
        argsTuple: TestingAppArgs['tuple']['error()void']
        returns: TestingAppReturns['error()void']
      }
    > &
    Record<
      'opt_in()void' | 'opt_in',
      {
        argsObj: TestingAppArgs['obj']['opt_in()void']
        argsTuple: TestingAppArgs['tuple']['opt_in()void']
        returns: TestingAppReturns['opt_in()void']
      }
    > &
    Record<
      'emitSwapped(uint64,uint64)void' | 'emitSwapped',
      {
        argsObj: TestingAppArgs['obj']['emitSwapped(uint64,uint64)void']
        argsTuple: TestingAppArgs['tuple']['emitSwapped(uint64,uint64)void']
        returns: TestingAppReturns['emitSwapped(uint64,uint64)void']
      }
    > &
    Record<
      'emitSwappedTwice(uint64,uint64)void' | 'emitSwappedTwice',
      {
        argsObj: TestingAppArgs['obj']['emitSwappedTwice(uint64,uint64)void']
        argsTuple: TestingAppArgs['tuple']['emitSwappedTwice(uint64,uint64)void']
        returns: TestingAppReturns['emitSwappedTwice(uint64,uint64)void']
      }
    > &
    Record<
      'emitComplex(uint64,uint64,uint32[])void' | 'emitComplex',
      {
        argsObj: TestingAppArgs['obj']['emitComplex(uint64,uint64,uint32[])void']
        argsTuple: TestingAppArgs['tuple']['emitComplex(uint64,uint64,uint32[])void']
        returns: TestingAppReturns['emitComplex(uint64,uint64,uint32[])void']
      }
    >
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        bytes1: BinaryState
        bytes2: BinaryState
        int1: bigint
        int2: bigint
        value: bigint
      }
    }
    local: {
      keys: {
        localBytes1: BinaryState
        localBytes2: BinaryState
        localInt1: bigint
        localInt2: bigint
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TestingAppSignatures = keyof TestingAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TestingAppNonVoidMethodSignatures = keyof TestingAppTypes['methods'] extends infer T
  ? T extends keyof TestingAppTypes['methods']
    ? MethodReturn<T> extends void
      ? never
      : T
    : never
  : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>
  }
>
/**
 * Maps a method signature from the TestingApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TestingAppSignatures> = TestingAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TestingApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TestingAppSignatures> = TestingAppTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TestingAppTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = TestingAppTypes['state']['local']['keys']

/**
 * Defines supported create method params for this smart contract
 */
export type TestingAppCreateCallParams = Expand<
  AppClientBareCallParams & { method?: undefined } & {
    onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC
  } & CreateSchema
>
/**
 * Defines supported update method params for this smart contract
 */
export type TestingAppUpdateCallParams = Expand<AppClientBareCallParams> & { method?: undefined }
/**
 * Defines supported delete method params for this smart contract
 */
export type TestingAppDeleteCallParams = Expand<AppClientBareCallParams> & { method?: undefined }
/**
 * Defines arguments required for the deploy method.
 */
export type TestingAppDeployParams = Expand<
  Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: TestingAppCreateCallParams
    /**
     * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    updateParams?: TestingAppUpdateCallParams
    /**
     * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    deleteParams?: TestingAppDeleteCallParams
  }
>

/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TestingApp smart contract
 */
export abstract class TestingAppParamsFactory {
  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the TestingApp smart contract using the opt_in()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optIn(
        params: CallParams<TestingAppArgs['obj']['opt_in()void'] | TestingAppArgs['tuple']['opt_in()void']>,
      ): AppClientMethodCallParams {
        return {
          ...params,
          method: 'opt_in()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the call_abi(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbi(
    params: CallParams<TestingAppArgs['obj']['call_abi(string)string'] | TestingAppArgs['tuple']['call_abi(string)string']> &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.value],
    }
  }
  /**
   * Constructs a no op call for the call_abi_foreign_refs()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbiForeignRefs(
    params: CallParams<TestingAppArgs['obj']['call_abi_foreign_refs()string'] | TestingAppArgs['tuple']['call_abi_foreign_refs()string']> &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi_foreign_refs()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the set_global(uint64,uint64,string,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGlobal(
    params: CallParams<
      | TestingAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
      | TestingAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_global(uint64,uint64,string,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.int1, params.args.int2, params.args.bytes1, params.args.bytes2],
    }
  }
  /**
   * Constructs a no op call for the set_local(uint64,uint64,string,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setLocal(
    params: CallParams<
      | TestingAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
      | TestingAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_local(uint64,uint64,string,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.int1, params.args.int2, params.args.bytes1, params.args.bytes2],
    }
  }
  /**
   * Constructs a no op call for the issue_transfer_to_sender(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static issueTransferToSender(
    params: CallParams<
      TestingAppArgs['obj']['issue_transfer_to_sender(uint64)void'] | TestingAppArgs['tuple']['issue_transfer_to_sender(uint64)void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'issue_transfer_to_sender(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the set_box(byte[4],string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBox(
    params: CallParams<TestingAppArgs['obj']['set_box(byte[4],string)void'] | TestingAppArgs['tuple']['set_box(byte[4],string)void']> &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box(byte[4],string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the error()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static error(
    params: CallParams<TestingAppArgs['obj']['error()void'] | TestingAppArgs['tuple']['error()void']> & CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'error()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emitSwapped(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emitSwapped(
    params: CallParams<
      TestingAppArgs['obj']['emitSwapped(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwapped(uint64,uint64)void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emitSwapped(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a, params.args.b],
    }
  }
  /**
   * Constructs a no op call for the emitSwappedTwice(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emitSwappedTwice(
    params: CallParams<
      TestingAppArgs['obj']['emitSwappedTwice(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwappedTwice(uint64,uint64)void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emitSwappedTwice(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a, params.args.b],
    }
  }
  /**
   * Constructs a no op call for the emitComplex(uint64,uint64,uint32[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emitComplex(
    params: CallParams<
      TestingAppArgs['obj']['emitComplex(uint64,uint64,uint32[])void'] | TestingAppArgs['tuple']['emitComplex(uint64,uint64,uint32[])void']
    > &
      CallOnComplete,
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emitComplex(uint64,uint64,uint32[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a, params.args.b, params.args.array],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TestingApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TestingAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TestingAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TestingAppClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(params: AppFactoryResolveAppClientByCreatorAndNameParams) {
    return new TestingAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TestingApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TestingAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TestingAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (
        params?: Expand<
          AppClientBareCallParams &
            AppClientCompilationParams &
            CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC }
        >,
      ) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
    },
  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (
        params?: Expand<
          AppClientBareCallParams &
            AppClientCompilationParams &
            CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC }
        >,
      ) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },
  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (
        params?: Expand<
          AppClientBareCallParams &
            AppClientCompilationParams &
            CreateSchema &
            SendParams & { onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC }
        >,
      ) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TestingAppClient(result.appClient) }
      },
    },
  }
}
/**
 * A client to make calls to the TestingApp smart contract
 */
export class TestingAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TestingAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TestingApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TestingAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient =
      appClientOrParams instanceof _AppClient
        ? appClientOrParams
        : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
          })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TestingAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined
      ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs)
      : undefined
  }

  /**
   * Returns a new `TestingAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TestingAppClient> {
    return new TestingAppClient(await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC }))
  }

  /**
   * Returns an `TestingAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(params: Omit<ResolveAppClientByNetwork, 'appSpec'>): Promise<TestingAppClient> {
    return new TestingAppClient(await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC }))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params)
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the TestingApp smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optIn: (params: CallParams<TestingAppArgs['obj']['opt_in()void'] | TestingAppArgs['tuple']['opt_in()void']> = { args: [] }) => {
        return this.appClient.params.optIn(TestingAppParamsFactory.optIn.optIn(params))
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the TestingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TestingApp smart contract using the `call_abi(string)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbi: (
      params: CallParams<TestingAppArgs['obj']['call_abi(string)string'] | TestingAppArgs['tuple']['call_abi(string)string']> & {
        onComplete?: OnApplicationComplete.NoOpOC
      },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.callAbi(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `call_abi_foreign_refs()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbiForeignRefs: (
      params: CallParams<
        TestingAppArgs['obj']['call_abi_foreign_refs()string'] | TestingAppArgs['tuple']['call_abi_foreign_refs()string']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.callAbiForeignRefs(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGlobal: (
      params: CallParams<
        | TestingAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
        | TestingAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.setGlobal(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setLocal: (
      params: CallParams<
        | TestingAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
        | TestingAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.setLocal(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `issue_transfer_to_sender(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    issueTransferToSender: (
      params: CallParams<
        TestingAppArgs['obj']['issue_transfer_to_sender(uint64)void'] | TestingAppArgs['tuple']['issue_transfer_to_sender(uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.issueTransferToSender(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBox: (
      params: CallParams<TestingAppArgs['obj']['set_box(byte[4],string)void'] | TestingAppArgs['tuple']['set_box(byte[4],string)void']> & {
        onComplete?: OnApplicationComplete.NoOpOC
      },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.setBox(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `error()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    error: (
      params: CallParams<TestingAppArgs['obj']['error()void'] | TestingAppArgs['tuple']['error()void']> & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.error(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `emitSwapped(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emitSwapped: (
      params: CallParams<
        TestingAppArgs['obj']['emitSwapped(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwapped(uint64,uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.emitSwapped(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `emitSwappedTwice(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emitSwappedTwice: (
      params: CallParams<
        TestingAppArgs['obj']['emitSwappedTwice(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwappedTwice(uint64,uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.emitSwappedTwice(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `emitComplex(uint64,uint64,uint32[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emitComplex: (
      params: CallParams<
        | TestingAppArgs['obj']['emitComplex(uint64,uint64,uint32[])void']
        | TestingAppArgs['tuple']['emitComplex(uint64,uint64,uint32[])void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.params.call(TestingAppParamsFactory.emitComplex(params))
    },
  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the TestingApp smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optIn: (params: CallParams<TestingAppArgs['obj']['opt_in()void'] | TestingAppArgs['tuple']['opt_in()void']> = { args: [] }) => {
        return this.appClient.createTransaction.optIn(TestingAppParamsFactory.optIn.optIn(params))
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the TestingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TestingApp smart contract using the `call_abi(string)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbi: (
      params: CallParams<TestingAppArgs['obj']['call_abi(string)string'] | TestingAppArgs['tuple']['call_abi(string)string']> & {
        onComplete?: OnApplicationComplete.NoOpOC
      },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.callAbi(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `call_abi_foreign_refs()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbiForeignRefs: (
      params: CallParams<
        TestingAppArgs['obj']['call_abi_foreign_refs()string'] | TestingAppArgs['tuple']['call_abi_foreign_refs()string']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.callAbiForeignRefs(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGlobal: (
      params: CallParams<
        | TestingAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
        | TestingAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.setGlobal(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setLocal: (
      params: CallParams<
        | TestingAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
        | TestingAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.setLocal(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `issue_transfer_to_sender(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    issueTransferToSender: (
      params: CallParams<
        TestingAppArgs['obj']['issue_transfer_to_sender(uint64)void'] | TestingAppArgs['tuple']['issue_transfer_to_sender(uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.issueTransferToSender(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBox: (
      params: CallParams<TestingAppArgs['obj']['set_box(byte[4],string)void'] | TestingAppArgs['tuple']['set_box(byte[4],string)void']> & {
        onComplete?: OnApplicationComplete.NoOpOC
      },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.setBox(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `error()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    error: (
      params: CallParams<TestingAppArgs['obj']['error()void'] | TestingAppArgs['tuple']['error()void']> & {
        onComplete?: OnApplicationComplete.NoOpOC
      } = { args: [] },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.error(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `emitSwapped(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emitSwapped: (
      params: CallParams<
        TestingAppArgs['obj']['emitSwapped(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwapped(uint64,uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.emitSwapped(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `emitSwappedTwice(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emitSwappedTwice: (
      params: CallParams<
        TestingAppArgs['obj']['emitSwappedTwice(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwappedTwice(uint64,uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.emitSwappedTwice(params))
    },

    /**
     * Makes a call to the TestingApp smart contract using the `emitComplex(uint64,uint64,uint32[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emitComplex: (
      params: CallParams<
        | TestingAppArgs['obj']['emitComplex(uint64,uint64,uint32[])void']
        | TestingAppArgs['tuple']['emitComplex(uint64,uint64,uint32[])void']
      > & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      return this.appClient.createTransaction.call(TestingAppParamsFactory.emitComplex(params))
    },
  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TestingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params)
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the TestingApp smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optIn: async (
        params: CallParams<TestingAppArgs['obj']['opt_in()void'] | TestingAppArgs['tuple']['opt_in()void']> & SendParams = { args: [] },
      ) => {
        const result = await this.appClient.send.optIn(TestingAppParamsFactory.optIn.optIn(params))
        return { ...result, return: result.return as undefined | TestingAppReturns['opt_in()void'] }
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the TestingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TestingApp smart contract using the `call_abi(string)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbi: async (
      params: CallParams<TestingAppArgs['obj']['call_abi(string)string'] | TestingAppArgs['tuple']['call_abi(string)string']> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.callAbi(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['call_abi(string)string'] }
    },

    /**
     * Makes a call to the TestingApp smart contract using the `call_abi_foreign_refs()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbiForeignRefs: async (
      params: CallParams<
        TestingAppArgs['obj']['call_abi_foreign_refs()string'] | TestingAppArgs['tuple']['call_abi_foreign_refs()string']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.callAbiForeignRefs(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['call_abi_foreign_refs()string'] }
    },

    /**
     * Makes a call to the TestingApp smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGlobal: async (
      params: CallParams<
        | TestingAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
        | TestingAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.setGlobal(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['set_global(uint64,uint64,string,byte[4])void'] }
    },

    /**
     * Makes a call to the TestingApp smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setLocal: async (
      params: CallParams<
        | TestingAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
        | TestingAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.setLocal(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['set_local(uint64,uint64,string,byte[4])void'] }
    },

    /**
     * Makes a call to the TestingApp smart contract using the `issue_transfer_to_sender(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    issueTransferToSender: async (
      params: CallParams<
        TestingAppArgs['obj']['issue_transfer_to_sender(uint64)void'] | TestingAppArgs['tuple']['issue_transfer_to_sender(uint64)void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.issueTransferToSender(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['issue_transfer_to_sender(uint64)void'] }
    },

    /**
     * Makes a call to the TestingApp smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBox: async (
      params: CallParams<TestingAppArgs['obj']['set_box(byte[4],string)void'] | TestingAppArgs['tuple']['set_box(byte[4],string)void']> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.setBox(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['set_box(byte[4],string)void'] }
    },

    /**
     * Makes a call to the TestingApp smart contract using the `error()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    error: async (
      params: CallParams<TestingAppArgs['obj']['error()void'] | TestingAppArgs['tuple']['error()void']> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.error(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['error()void'] }
    },

    /**
     * Makes a call to the TestingApp smart contract using the `emitSwapped(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emitSwapped: async (
      params: CallParams<
        TestingAppArgs['obj']['emitSwapped(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwapped(uint64,uint64)void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.emitSwapped(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['emitSwapped(uint64,uint64)void'] }
    },

    /**
     * Makes a call to the TestingApp smart contract using the `emitSwappedTwice(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emitSwappedTwice: async (
      params: CallParams<
        TestingAppArgs['obj']['emitSwappedTwice(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwappedTwice(uint64,uint64)void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.emitSwappedTwice(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['emitSwappedTwice(uint64,uint64)void'] }
    },

    /**
     * Makes a call to the TestingApp smart contract using the `emitComplex(uint64,uint64,uint32[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emitComplex: async (
      params: CallParams<
        | TestingAppArgs['obj']['emitComplex(uint64,uint64,uint32[])void']
        | TestingAppArgs['tuple']['emitComplex(uint64,uint64,uint32[])void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC },
    ) => {
      const result = await this.appClient.send.call(TestingAppParamsFactory.emitComplex(params))
      return { ...result, return: result.return as undefined | TestingAppReturns['emitComplex(uint64,uint64,uint32[])void'] }
    },
  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TestingAppClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the TestingApp smart contract using the `call_abi(string)string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbi(params: CallParams<TestingAppArgs['obj']['call_abi(string)string'] | TestingAppArgs['tuple']['call_abi(string)string']>) {
    const result = await this.appClient.send.call(TestingAppParamsFactory.callAbi(params))
    return result.return as TestingAppReturns['call_abi(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the TestingApp smart contract using the `call_abi_foreign_refs()string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbiForeignRefs(
    params: CallParams<
      TestingAppArgs['obj']['call_abi_foreign_refs()string'] | TestingAppArgs['tuple']['call_abi_foreign_refs()string']
    > = { args: [] },
  ) {
    const result = await this.appClient.send.call(TestingAppParamsFactory.callAbiForeignRefs(params))
    return result.return as TestingAppReturns['call_abi_foreign_refs()string']
  }

  /**
   * Methods to access state for the current TestingApp app
   */
  state = {
    /**
     * Methods to access global state for the current TestingApp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          bytes1: new BinaryStateValue(result.bytes1),
          bytes2: new BinaryStateValue(result.bytes2),
          int1: result.int1,
          int2: result.int2,
          value: result.value,
        }
      },
      /**
       * Get the current value of the bytes1 key in global state
       */
      bytes1: async (): Promise<BinaryState> => {
        return new BinaryStateValue((await this.appClient.state.global.getValue('bytes1')) as Uint8Array | undefined)
      },
      /**
       * Get the current value of the bytes2 key in global state
       */
      bytes2: async (): Promise<BinaryState> => {
        return new BinaryStateValue((await this.appClient.state.global.getValue('bytes2')) as Uint8Array | undefined)
      },
      /**
       * Get the current value of the int1 key in global state
       */
      int1: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('int1')) as bigint | undefined
      },
      /**
       * Get the current value of the int2 key in global state
       */
      int2: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('int2')) as bigint | undefined
      },
      /**
       * Get the current value of the value key in global state
       */
      value: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('value')) as bigint | undefined
      },
    },
    /**
     * Methods to access local state for the current TestingApp app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : address.toString()
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            localBytes1: new BinaryStateValue(result.local_bytes1),
            localBytes2: new BinaryStateValue(result.local_bytes2),
            localInt1: result.local_int1,
            localInt2: result.local_int2,
          }
        },
        /**
         * Get the current value of the local_bytes1 key in local state
         */
        localBytes1: async (): Promise<BinaryState> => {
          return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue('localBytes1')) as Uint8Array | undefined)
        },
        /**
         * Get the current value of the local_bytes2 key in local state
         */
        localBytes2: async (): Promise<BinaryState> => {
          return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue('localBytes2')) as Uint8Array | undefined)
        },
        /**
         * Get the current value of the local_int1 key in local state
         */
        localInt1: async (): Promise<bigint | undefined> => {
          return (await this.appClient.state.local(encodedAddress).getValue('localInt1')) as bigint | undefined
        },
        /**
         * Get the current value of the local_int2 key in local state
         */
        localInt2: async (): Promise<bigint | undefined> => {
          return (await this.appClient.state.local(encodedAddress).getValue('localInt2')) as bigint | undefined
        },
      }
    },
  }

  public newGroup(): TestingAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain: Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a call_abi(string)string method call against the TestingApp contract
       */
      callAbi(
        params: CallParams<TestingAppArgs['obj']['call_abi(string)string'] | TestingAppArgs['tuple']['call_abi(string)string']> & {
          onComplete?: OnApplicationComplete.NoOpOC
        },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbi(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi(string)string', v))
        return this
      },
      /**
       * Add a call_abi_foreign_refs()string method call against the TestingApp contract
       */
      callAbiForeignRefs(
        params: CallParams<
          TestingAppArgs['obj']['call_abi_foreign_refs()string'] | TestingAppArgs['tuple']['call_abi_foreign_refs()string']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbiForeignRefs(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi_foreign_refs()string', v))
        return this
      },
      /**
       * Add a set_global(uint64,uint64,string,byte[4])void method call against the TestingApp contract
       */
      setGlobal(
        params: CallParams<
          | TestingAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
          | TestingAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setGlobal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_local(uint64,uint64,string,byte[4])void method call against the TestingApp contract
       */
      setLocal(
        params: CallParams<
          | TestingAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
          | TestingAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setLocal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a issue_transfer_to_sender(uint64)void method call against the TestingApp contract
       */
      issueTransferToSender(
        params: CallParams<
          TestingAppArgs['obj']['issue_transfer_to_sender(uint64)void'] | TestingAppArgs['tuple']['issue_transfer_to_sender(uint64)void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.issueTransferToSender(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box(byte[4],string)void method call against the TestingApp contract
       */
      setBox(
        params: CallParams<
          TestingAppArgs['obj']['set_box(byte[4],string)void'] | TestingAppArgs['tuple']['set_box(byte[4],string)void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a error()void method call against the TestingApp contract
       */
      error(
        params: CallParams<TestingAppArgs['obj']['error()void'] | TestingAppArgs['tuple']['error()void']> & {
          onComplete?: OnApplicationComplete.NoOpOC
        },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.error(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a emitSwapped(uint64,uint64)void method call against the TestingApp contract
       */
      emitSwapped(
        params: CallParams<
          TestingAppArgs['obj']['emitSwapped(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwapped(uint64,uint64)void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emitSwapped(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a emitSwappedTwice(uint64,uint64)void method call against the TestingApp contract
       */
      emitSwappedTwice(
        params: CallParams<
          TestingAppArgs['obj']['emitSwappedTwice(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwappedTwice(uint64,uint64)void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emitSwappedTwice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a emitComplex(uint64,uint64,uint32[])void method call against the TestingApp contract
       */
      emitComplex(
        params: CallParams<
          | TestingAppArgs['obj']['emitComplex(uint64,uint64,uint32[])void']
          | TestingAppArgs['tuple']['emitComplex(uint64,uint64,uint32[])void']
        > & { onComplete?: OnApplicationComplete.NoOpOC },
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emitComplex(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
        }
      },
      get optIn() {
        return {
          optIn: (params: CallParams<TestingAppArgs['obj']['opt_in()void'] | TestingAppArgs['tuple']['opt_in()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optIn(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the TestingApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await composer.simulate(options)
        return {
          ...result,
          returns: result.returns?.map((val, i) => (resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)),
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => (resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)),
        }
      },
    } as unknown as TestingAppComposer
  }
}
export type TestingAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the call_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbi(
    params?: CallParams<TestingAppArgs['obj']['call_abi(string)string'] | TestingAppArgs['tuple']['call_abi(string)string']>,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['call_abi(string)string'] | undefined]>

  /**
   * Calls the call_abi_foreign_refs()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiForeignRefs(
    params?: CallParams<TestingAppArgs['obj']['call_abi_foreign_refs()string'] | TestingAppArgs['tuple']['call_abi_foreign_refs()string']>,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['call_abi_foreign_refs()string'] | undefined]>

  /**
   * Calls the set_global(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGlobal(
    params?: CallParams<
      | TestingAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
      | TestingAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
    >,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['set_global(uint64,uint64,string,byte[4])void'] | undefined]>

  /**
   * Calls the set_local(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setLocal(
    params?: CallParams<
      | TestingAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
      | TestingAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
    >,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['set_local(uint64,uint64,string,byte[4])void'] | undefined]>

  /**
   * Calls the issue_transfer_to_sender(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  issueTransferToSender(
    params?: CallParams<
      TestingAppArgs['obj']['issue_transfer_to_sender(uint64)void'] | TestingAppArgs['tuple']['issue_transfer_to_sender(uint64)void']
    >,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['issue_transfer_to_sender(uint64)void'] | undefined]>

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBox(
    params?: CallParams<TestingAppArgs['obj']['set_box(byte[4],string)void'] | TestingAppArgs['tuple']['set_box(byte[4],string)void']>,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['set_box(byte[4],string)void'] | undefined]>

  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  error(
    params?: CallParams<TestingAppArgs['obj']['error()void'] | TestingAppArgs['tuple']['error()void']>,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['error()void'] | undefined]>

  /**
   * Calls the emitSwapped(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emitSwapped(
    params?: CallParams<
      TestingAppArgs['obj']['emitSwapped(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwapped(uint64,uint64)void']
    >,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['emitSwapped(uint64,uint64)void'] | undefined]>

  /**
   * Calls the emitSwappedTwice(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emitSwappedTwice(
    params?: CallParams<
      TestingAppArgs['obj']['emitSwappedTwice(uint64,uint64)void'] | TestingAppArgs['tuple']['emitSwappedTwice(uint64,uint64)void']
    >,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['emitSwappedTwice(uint64,uint64)void'] | undefined]>

  /**
   * Calls the emitComplex(uint64,uint64,uint32[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emitComplex(
    params?: CallParams<
      TestingAppArgs['obj']['emitComplex(uint64,uint64,uint32[])void'] | TestingAppArgs['tuple']['emitComplex(uint64,uint64,uint32[])void']
    >,
  ): TestingAppComposer<[...TReturns, TestingAppReturns['emitComplex(uint64,uint64,uint32[])void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the TestingApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams): TestingAppComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the TestingApp smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(
      params?: CallParams<TestingAppArgs['obj']['opt_in()void'] | TestingAppArgs['tuple']['opt_in()void']>,
    ): TestingAppComposer<[...TReturns, TestingAppReturns['opt_in()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the TestingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TestingAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TestingAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<TestingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TestingAppComposerResults<TReturns>>
}
export type TestingAppComposerResults<TReturns extends [...any[]]> = Expand<
  SendAtomicTransactionComposerResults & {
    returns: TReturns
  }
>
