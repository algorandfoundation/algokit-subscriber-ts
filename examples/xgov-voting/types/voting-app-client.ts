/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  hints: {
    'opup_bootstrap(pay)uint64': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void': {
      call_config: {
        no_op: 'CREATE',
      },
    },
    'bootstrap(pay)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'close(application)void': {
      default_arguments: {
        opup_app: {
          source: 'global-state',
          data: 'ouaid',
        },
      },
      call_config: {
        no_op: 'CALL',
      },
    },
    'get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64)': {
      read_only: true,
      default_arguments: {
        opup_app: {
          source: 'global-state',
          data: 'ouaid',
        },
      },
      structs: {
        output: {
          name: 'VotingPreconditions',
          elements: [
            ['is_voting_open', 'uint64'],
            ['is_allowed_to_vote', 'uint64'],
            ['has_already_voted', 'uint64'],
            ['current_time', 'uint64'],
          ],
        },
      },
      call_config: {
        no_op: 'CALL',
      },
    },
    'vote(pay,byte[],uint64,uint8[],uint64[],application)void': {
      default_arguments: {
        opup_app: {
          source: 'global-state',
          data: 'ouaid',
        },
      },
      call_config: {
        no_op: 'CALL',
      },
    },
  },
  source: {
    approval:
      '',
    clear: 'I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu',
  },
  state: {
    global: {
      num_byte_slices: 5,
      num_uints: 10,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {
        close_time: {
          type: 'uint64',
          key: 'close_time',
          descr: 'The unix timestamp of the time the vote was closed',
        },
        end_time: {
          type: 'uint64',
          key: 'end_time',
          descr: 'The unix timestamp of the ending time of voting',
        },
        is_bootstrapped: {
          type: 'uint64',
          key: 'is_bootstrapped',
          descr: 'Whether or not the contract has been bootstrapped with answers',
        },
        metadata_ipfs_cid: {
          type: 'bytes',
          key: 'metadata_ipfs_cid',
          descr: 'The IPFS content ID of the voting metadata file',
        },
        nft_asset_id: {
          type: 'uint64',
          key: 'nft_asset_id',
          descr: 'The asset ID of a result NFT if one has been created',
        },
        nft_image_url: {
          type: 'bytes',
          key: 'nft_image_url',
          descr: 'The IPFS URL of the default image to use as the media of the result NFT',
        },
        option_counts: {
          type: 'bytes',
          key: 'option_counts',
          descr: 'The number of options for each question',
        },
        opup_app_id: {
          type: 'uint64',
          key: 'ouaid',
          descr: '',
        },
        quorum: {
          type: 'uint64',
          key: 'quorum',
          descr: 'The minimum number of voters to reach quorum',
        },
        snapshot_public_key: {
          type: 'bytes',
          key: 'snapshot_public_key',
          descr: 'The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot',
        },
        start_time: {
          type: 'uint64',
          key: 'start_time',
          descr: 'The unix timestamp of the starting time of voting',
        },
        total_options: {
          type: 'uint64',
          key: 'total_options',
          descr: 'The total number of options',
        },
        vote_id: {
          type: 'bytes',
          key: 'vote_id',
          descr: 'The identifier of this voting round',
        },
        vote_type: {
          type: 'uint64',
          key: 'vote_type',
          descr:
            'The type of this voting round; 0 = no snapshot / weighting, 1 = snapshot & no weighting, 2 = snapshot & weighting per question, 3 = snapshot & weighting partitioned across the questions',
        },
        voter_count: {
          type: 'uint64',
          key: 'voter_count',
          descr: 'The minimum number of voters who have voted',
        },
      },
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: 'VotingRoundApp',
    methods: [
      {
        name: 'opup_bootstrap',
        args: [
          {
            type: 'pay',
            name: 'ptxn',
          },
        ],
        returns: {
          type: 'uint64',
        },
        desc: 'initialize opup with bootstrap to create a target app',
      },
      {
        name: 'create',
        args: [
          {
            type: 'string',
            name: 'vote_id',
          },
          {
            type: 'uint8',
            name: 'vote_type',
          },
          {
            type: 'byte[]',
            name: 'snapshot_public_key',
          },
          {
            type: 'string',
            name: 'metadata_ipfs_cid',
          },
          {
            type: 'uint64',
            name: 'start_time',
          },
          {
            type: 'uint64',
            name: 'end_time',
          },
          {
            type: 'uint8[]',
            name: 'option_counts',
          },
          {
            type: 'uint64',
            name: 'quorum',
          },
          {
            type: 'string',
            name: 'nft_image_url',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'bootstrap',
        args: [
          {
            type: 'pay',
            name: 'fund_min_bal_req',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'close',
        args: [
          {
            type: 'application',
            name: 'opup_app',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'get_preconditions',
        args: [
          {
            type: 'byte[]',
            name: 'signature',
          },
          {
            type: 'uint64',
            name: 'weighting',
          },
          {
            type: 'application',
            name: 'opup_app',
          },
        ],
        returns: {
          type: '(uint64,uint64,uint64,uint64)',
        },
      },
      {
        name: 'vote',
        args: [
          {
            type: 'pay',
            name: 'fund_min_bal_req',
          },
          {
            type: 'byte[]',
            name: 'signature',
          },
          {
            type: 'uint64',
            name: 'weighting',
          },
          {
            type: 'uint8[]',
            name: 'answer_ids',
          },
          {
            type: 'uint64[]',
            name: 'answer_weights',
          },
          {
            type: 'application',
            name: 'opup_app',
          },
        ],
        returns: {
          type: 'void',
        },
      },
    ],
    networks: {},
  },
  bare_call_config: {
    delete_application: 'CALL',
  },
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<
    SendTransactionParams,
    'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'
  >
}
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'
>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the VotingRoundApp smart contract.
 */
export type VotingRoundApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    'opup_bootstrap(pay)uint64' | 'opup_bootstrap',
    {
      argsObj: {
        ptxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [ptxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: bigint
    }
  > &
    Record<
      'create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void' | 'create',
      {
        argsObj: {
          voteId: string
          voteType: number
          snapshotPublicKey: Uint8Array
          metadataIpfsCid: string
          startTime: bigint | number
          endTime: bigint | number
          optionCounts: number[]
          quorum: bigint | number
          nftImageUrl: string
        }
        argsTuple: [
          voteId: string,
          voteType: number,
          snapshotPublicKey: Uint8Array,
          metadataIpfsCid: string,
          startTime: bigint | number,
          endTime: bigint | number,
          optionCounts: number[],
          quorum: bigint | number,
          nftImageUrl: string,
        ]
        returns: void
      }
    > &
    Record<
      'bootstrap(pay)void' | 'bootstrap',
      {
        argsObj: {
          fundMinBalReq: TransactionToSign | Transaction | Promise<SendTransactionResult>
        }
        argsTuple: [fundMinBalReq: TransactionToSign | Transaction | Promise<SendTransactionResult>]
        returns: void
      }
    > &
    Record<
      'close(application)void' | 'close',
      {
        argsObj: {
          opupApp?: number | bigint
        }
        argsTuple: [opupApp: number | bigint | undefined]
        returns: void
      }
    > &
    Record<
      'get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64)' | 'get_preconditions',
      {
        argsObj: {
          signature: Uint8Array
          weighting: bigint | number
          opupApp?: number | bigint
        }
        argsTuple: [signature: Uint8Array, weighting: bigint | number, opupApp: number | bigint | undefined]
        returns: VotingPreconditions
      }
    > &
    Record<
      'vote(pay,byte[],uint64,uint8[],uint64[],application)void' | 'vote',
      {
        argsObj: {
          fundMinBalReq: TransactionToSign | Transaction | Promise<SendTransactionResult>
          signature: Uint8Array
          weighting: bigint | number
          answerIds: number[]
          answerWeights: bigint | number[]
          opupApp?: number | bigint
        }
        argsTuple: [
          fundMinBalReq: TransactionToSign | Transaction | Promise<SendTransactionResult>,
          signature: Uint8Array,
          weighting: bigint | number,
          answerIds: number[],
          answerWeights: bigint | number[],
          opupApp: number | bigint | undefined,
        ]
        returns: void
      }
    >
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * The unix timestamp of the time the vote was closed
       */
      closeTime?: IntegerState
      /**
       * The unix timestamp of the ending time of voting
       */
      endTime?: IntegerState
      /**
       * Whether or not the contract has been bootstrapped with answers
       */
      isBootstrapped?: IntegerState
      /**
       * The IPFS content ID of the voting metadata file
       */
      metadataIpfsCid?: BinaryState
      /**
       * The asset ID of a result NFT if one has been created
       */
      nftAssetId?: IntegerState
      /**
       * The IPFS URL of the default image to use as the media of the result NFT
       */
      nftImageUrl?: BinaryState
      /**
       * The number of options for each question
       */
      optionCounts?: BinaryState
      ouaid?: IntegerState
      /**
       * The minimum number of voters to reach quorum
       */
      quorum?: IntegerState
      /**
       * The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot
       */
      snapshotPublicKey?: BinaryState
      /**
       * The unix timestamp of the starting time of voting
       */
      startTime?: IntegerState
      /**
       * The total number of options
       */
      totalOptions?: IntegerState
      /**
       * The identifier of this voting round
       */
      voteId?: BinaryState
      /**
       * The type of this voting round; 0 = no snapshot / weighting, 1 = snapshot & no weighting, 2 = snapshot & weighting per question, 3 = snapshot & weighting partitioned across the questions
       */
      voteType?: IntegerState
      /**
       * The minimum number of voters who have voted
       */
      voterCount?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type VotingRoundAppSig = keyof VotingRoundApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends VotingRoundAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams &
  CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a VotingPreconditions result as a struct
 */
export type VotingPreconditions = {
  isVotingOpen: bigint
  isAllowedToVote: bigint
  hasAlreadyVoted: bigint
  currentTime: bigint
}
/**
 * Converts the tuple representation of a VotingPreconditions to the struct representation
 */
export function VotingPreconditions([isVotingOpen, isAllowedToVote, hasAlreadyVoted, currentTime]: [bigint, bigint, bigint, bigint]) {
  return {
    isVotingOpen,
    isAllowedToVote,
    hasAlreadyVoted,
    currentTime,
  }
}
/**
 * Maps a method signature from the VotingRoundApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends VotingRoundAppSig> = VotingRoundApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VotingRoundApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VotingRoundAppSig> = VotingRoundApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type VotingRoundAppCreateCalls = (typeof VotingRoundAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type VotingRoundAppCreateCallParams = TypedCallParams<'create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void'> &
  OnCompleteNoOp
/**
 * A factory for available 'delete' calls
 */
export type VotingRoundAppDeleteCalls = (typeof VotingRoundAppCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type VotingRoundAppDeleteCallParams = TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type VotingRoundAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: VotingRoundAppCreateCalls) => VotingRoundAppCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: VotingRoundAppDeleteCalls) => VotingRoundAppDeleteCallParams
}

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class VotingRoundAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the VotingRoundApp smart contract using the create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(
        args: MethodArgs<'create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void'>,
        params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & OnCompleteNoOp = {},
      ) {
        return {
          method: 'create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void' as const,
          methodArgs: Array.isArray(args)
            ? args
            : [
                args.voteId,
                args.voteType,
                args.snapshotPublicKey,
                args.metadataIpfsCid,
                args.startTime,
                args.endTime,
                args.optionCounts,
                args.quorum,
                args.nftImageUrl,
              ],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the VotingRoundApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the opup_bootstrap(pay)uint64 ABI method
   *
   * initialize opup with bootstrap to create a target app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static opupBootstrap(args: MethodArgs<'opup_bootstrap(pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'opup_bootstrap(pay)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.ptxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.fundMinBalReq],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the close(application)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static close(args: MethodArgs<'close(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'close(application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.opupApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPreconditions(
    args: MethodArgs<'get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64)'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.signature, args.weighting, args.opupApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the vote(pay,byte[],uint64,uint8[],uint64[],application)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static vote(
    args: MethodArgs<'vote(pay,byte[],uint64,uint8[],uint64[],application)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'vote(pay,byte[],uint64,uint8[],uint64[],application)void' as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.fundMinBalReq, args.signature, args.weighting, args.answerIds, args.answerWeights, args.opupApp],
      ...params,
    }
  }
}

/**
 * A client to make calls to the VotingRoundApp smart contract
 */
export class VotingRoundAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `VotingRoundAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(
    appDetails: AppDetails,
    private algod: Algodv2,
  ) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod,
    )
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue =
      result.return?.returnValue !== undefined && returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined)
    return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof VotingRoundApp['methods']>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>,
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the VotingRoundApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: VotingRoundAppDeployArgs & AppClientDeployCoreParams & IncludeSchema = {},
  ): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(VotingRoundAppCallFactory.create)
    const deleteArgs = params.deleteCall?.(VotingRoundAppCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the VotingRoundApp smart contract using the create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(
        args: MethodArgs<'create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void'>,
        params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & OnCompleteNoOp = {},
      ) {
        return $this.mapReturnValue<
          MethodReturn<'create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void'>,
          AppCreateCallTransactionResult
        >(await $this.appClient.create(VotingRoundAppCallFactory.create.create(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the VotingRoundApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.delete(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the VotingRoundApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the opup_bootstrap(pay)uint64 ABI method.
   *
   * initialize opup with bootstrap to create a target app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public opupBootstrap(args: MethodArgs<'opup_bootstrap(pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingRoundAppCallFactory.opupBootstrap(args, params))
  }

  /**
   * Calls the bootstrap(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingRoundAppCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the close(application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public close(args: MethodArgs<'close(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingRoundAppCallFactory.close(args, params))
  }

  /**
   * Calls the get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPreconditions(
    args: MethodArgs<'get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64)'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(VotingRoundAppCallFactory.getPreconditions(args, params), VotingPreconditions)
  }

  /**
   * Calls the vote(pay,byte[],uint64,uint8[],uint64[],application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public vote(
    args: MethodArgs<'vote(pay,byte[],uint64,uint8[],uint64[],application)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(VotingRoundAppCallFactory.vote(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value)) throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      },
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value) throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<VotingRoundApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get closeTime() {
        return VotingRoundAppClient.getIntegerState(state, 'close_time')
      },
      get endTime() {
        return VotingRoundAppClient.getIntegerState(state, 'end_time')
      },
      get isBootstrapped() {
        return VotingRoundAppClient.getIntegerState(state, 'is_bootstrapped')
      },
      get metadataIpfsCid() {
        return VotingRoundAppClient.getBinaryState(state, 'metadata_ipfs_cid')
      },
      get nftAssetId() {
        return VotingRoundAppClient.getIntegerState(state, 'nft_asset_id')
      },
      get nftImageUrl() {
        return VotingRoundAppClient.getBinaryState(state, 'nft_image_url')
      },
      get optionCounts() {
        return VotingRoundAppClient.getBinaryState(state, 'option_counts')
      },
      get ouaid() {
        return VotingRoundAppClient.getIntegerState(state, 'ouaid')
      },
      get quorum() {
        return VotingRoundAppClient.getIntegerState(state, 'quorum')
      },
      get snapshotPublicKey() {
        return VotingRoundAppClient.getBinaryState(state, 'snapshot_public_key')
      },
      get startTime() {
        return VotingRoundAppClient.getIntegerState(state, 'start_time')
      },
      get totalOptions() {
        return VotingRoundAppClient.getIntegerState(state, 'total_options')
      },
      get voteId() {
        return VotingRoundAppClient.getBinaryState(state, 'vote_id')
      },
      get voteType() {
        return VotingRoundAppClient.getIntegerState(state, 'vote_type')
      },
      get voterCount() {
        return VotingRoundAppClient.getIntegerState(state, 'voter_count')
      },
    }
  }

  public compose(): VotingRoundAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain: Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      opupBootstrap(args: MethodArgs<'opup_bootstrap(pay)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.opupBootstrap(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      bootstrap(args: MethodArgs<'bootstrap(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.bootstrap(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      close(args: MethodArgs<'close(application)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.close(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      getPreconditions(
        args: MethodArgs<'get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64)'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.getPreconditions(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(VotingPreconditions)
        return this
      },
      vote(
        args: MethodArgs<'vote(pay,byte[],uint64,uint8[],uint64[],application)void'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.vote(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() =>
              client.delete.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }),
            )
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(
        txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom,
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)),
        )
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue,
          ),
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => (resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)),
        }
      },
    } as unknown as VotingRoundAppComposer
  }
}
export type VotingRoundAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the opup_bootstrap(pay)uint64 ABI method.
   *
   * initialize opup with bootstrap to create a target app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  opupBootstrap(
    args: MethodArgs<'opup_bootstrap(pay)uint64'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): VotingRoundAppComposer<[...TReturns, MethodReturn<'opup_bootstrap(pay)uint64'>]>

  /**
   * Calls the bootstrap(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(
    args: MethodArgs<'bootstrap(pay)void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): VotingRoundAppComposer<[...TReturns, MethodReturn<'bootstrap(pay)void'>]>

  /**
   * Calls the close(application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  close(
    args: MethodArgs<'close(application)void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): VotingRoundAppComposer<[...TReturns, MethodReturn<'close(application)void'>]>

  /**
   * Calls the get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPreconditions(
    args: MethodArgs<'get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64)'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): VotingRoundAppComposer<[...TReturns, MethodReturn<'get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64)'>]>

  /**
   * Calls the vote(pay,byte[],uint64,uint8[],uint64[],application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(
    args: MethodArgs<'vote(pay,byte[],uint64,uint8[],uint64[],application)void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): VotingRoundAppComposer<[...TReturns, MethodReturn<'vote(pay,byte[],uint64,uint8[],uint64[],application)void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the VotingRoundApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): VotingRoundAppComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the VotingRoundApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): VotingRoundAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom,
  ): VotingRoundAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<VotingRoundAppComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<VotingRoundAppComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type VotingRoundAppComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type VotingRoundAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
