{
    "hints": {
        "opup_bootstrap(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create(string,uint8,byte[],string,uint64,uint64,uint8[],uint64,string)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "bootstrap(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "close(application)void": {
            "default_arguments": {
                "opup_app": {
                    "source": "global-state",
                    "data": "ouaid"
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_preconditions(byte[],uint64,application)(uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "default_arguments": {
                "opup_app": {
                    "source": "global-state",
                    "data": "ouaid"
                }
            },
            "structs": {
                "output": {
                    "name": "VotingPreconditions",
                    "elements": [
                        [
                            "is_voting_open",
                            "uint64"
                        ],
                        [
                            "is_allowed_to_vote",
                            "uint64"
                        ],
                        [
                            "has_already_voted",
                            "uint64"
                        ],
                        [
                            "current_time",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote(pay,byte[],uint64,uint8[],uint64[],application)void": {
            "default_arguments": {
                "opup_app": {
                    "source": "global-state",
                    "data": "ouaid"
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 5,
            "num_uints": 10
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "close_time": {
                    "type": "uint64",
                    "key": "close_time",
                    "descr": "The unix timestamp of the time the vote was closed"
                },
                "end_time": {
                    "type": "uint64",
                    "key": "end_time",
                    "descr": "The unix timestamp of the ending time of voting"
                },
                "is_bootstrapped": {
                    "type": "uint64",
                    "key": "is_bootstrapped",
                    "descr": "Whether or not the contract has been bootstrapped with answers"
                },
                "metadata_ipfs_cid": {
                    "type": "bytes",
                    "key": "metadata_ipfs_cid",
                    "descr": "The IPFS content ID of the voting metadata file"
                },
                "nft_asset_id": {
                    "type": "uint64",
                    "key": "nft_asset_id",
                    "descr": "The asset ID of a result NFT if one has been created"
                },
                "nft_image_url": {
                    "type": "bytes",
                    "key": "nft_image_url",
                    "descr": "The IPFS URL of the default image to use as the media of the result NFT"
                },
                "option_counts": {
                    "type": "bytes",
                    "key": "option_counts",
                    "descr": "The number of options for each question"
                },
                "opup_app_id": {
                    "type": "uint64",
                    "key": "ouaid",
                    "descr": ""
                },
                "quorum": {
                    "type": "uint64",
                    "key": "quorum",
                    "descr": "The minimum number of voters to reach quorum"
                },
                "snapshot_public_key": {
                    "type": "bytes",
                    "key": "snapshot_public_key",
                    "descr": "The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot"
                },
                "start_time": {
                    "type": "uint64",
                    "key": "start_time",
                    "descr": "The unix timestamp of the starting time of voting"
                },
                "total_options": {
                    "type": "uint64",
                    "key": "total_options",
                    "descr": "The total number of options"
                },
                "vote_id": {
                    "type": "bytes",
                    "key": "vote_id",
                    "descr": "The identifier of this voting round"
                },
                "vote_type": {
                    "type": "uint64",
                    "key": "vote_type",
                    "descr": "The type of this voting round; 0 = no snapshot / weighting, 1 = snapshot & no weighting, 2 = snapshot & weighting per question, 3 = snapshot & weighting partitioned across the questions"
                },
                "voter_count": {
                    "type": "uint64",
                    "key": "voter_count",
                    "descr": "The minimum number of voters who have voted"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "VotingRoundApp",
        "methods": [
            {
                "name": "opup_bootstrap",
                "args": [
                    {
                        "type": "pay",
                        "name": "ptxn"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "initialize opup with bootstrap to create a target app"
            },
            {
                "name": "create",
                "args": [
                    {
                        "type": "string",
                        "name": "vote_id"
                    },
                    {
                        "type": "uint8",
                        "name": "vote_type"
                    },
                    {
                        "type": "byte[]",
                        "name": "snapshot_public_key"
                    },
                    {
                        "type": "string",
                        "name": "metadata_ipfs_cid"
                    },
                    {
                        "type": "uint64",
                        "name": "start_time"
                    },
                    {
                        "type": "uint64",
                        "name": "end_time"
                    },
                    {
                        "type": "uint8[]",
                        "name": "option_counts"
                    },
                    {
                        "type": "uint64",
                        "name": "quorum"
                    },
                    {
                        "type": "string",
                        "name": "nft_image_url"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "pay",
                        "name": "fund_min_bal_req"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "close",
                "args": [
                    {
                        "type": "application",
                        "name": "opup_app"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_preconditions",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "signature"
                    },
                    {
                        "type": "uint64",
                        "name": "weighting"
                    },
                    {
                        "type": "application",
                        "name": "opup_app"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "pay",
                        "name": "fund_min_bal_req"
                    },
                    {
                        "type": "byte[]",
                        "name": "signature"
                    },
                    {
                        "type": "uint64",
                        "name": "weighting"
                    },
                    {
                        "type": "uint8[]",
                        "name": "answer_ids"
                    },
                    {
                        "type": "uint64[]",
                        "name": "answer_weights"
                    },
                    {
                        "type": "application",
                        "name": "opup_app"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "delete_application": "CALL"
    }
}